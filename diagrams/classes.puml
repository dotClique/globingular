@startuml classes

skinparam PageMargin 50

package globingular.core {

	class Country [[java:globingular.core.Country]] {
		-String countryCode
		-String shortName
		-String longname
		-String sovereignty
		-String region
		-long population
		-Province[] provinces
		+Country(String countryCode, String shortName, String longname, String sovereignty, String region, long population, Province[] provinces)
		+Country(String countryCode, String shortName)
		+String getCountryCode()
		+String getShortName()
		+String getLongName()
		+String getSovereignty()
		+String getRegion()
		+long getPopulation()
		+String toString()
	}

	class CountryCollector [[java:globingular.core.CountryCollector]] {
		-SetProperty<Country> visitedCountries
		-ReadOnlySetProperty<Country> visitedCountriesReadOnly
		-SortedList<Country> visitedCountriesSorted
		-World world
		+CountryCollector(World world)
		+World getWorld()
		+void setVisited(Country country)
		+void removeVisited(Country country)
		+boolean isVisited(Country country)
		+ReadOnlySetProperty<Country> visitedCountriesProperty()
		+ObservableSet<Country> getVisitedCountries()
		+SortedList<Country> getVisitedCountriesSorted()
		+int numberVisited()
		+String toString()
	}

	class CustomBindings [[java:globingular.core.CustomBindings]] {
		-CustomBindings()
		+{static}SortedList<T> createSortedListView(ObservableSet<T> targetSet, Comparator<T> comparator)
	}

	class DuplicateIdentifierException [[java:globingular.core.DuplicateIdentifierException]] {
		+DuplicateIdentifierException()
		+DuplicateIdentifierException(String s)
		+DuplicateIdentifierException(String message, Throwable cause)
		+DuplicateIdentifierException(Throwable cause)
	}
	class IllegalArgumentException [[java:java.lang.IllegalArgumentException]] {
	}
	IllegalArgumentException <|-- DuplicateIdentifierException

	class Province [[java:globingular.core.Province]] {
		-String provinceCode
		-String capital
		-String name
		-long population
		+Province(String provinceCode, String capital, String name, long population)
		+String getProvinceCode()
		+String getName()
		+String getCapital()
		+long getPopulation()
	}

	class World [[java:globingular.core.World]] {
		-Set<Country> countries
		-HashMap<String,Country> countriesByCode
		-HashMap<String,Country> countriesByName
		+Country getCountryFromCode(String countryCode)
		+Country getCountryFromName(String countryName)
		+Set<Country> getCountries()
		+World(Country[] countries)
		+boolean countryExists(Country country)
	}
}

package globingular.persistence {
	class CountryCollectorDeserializer [[java:CountryCollectorDeserializer]] {
		+CountryCollector deserialize(JsonParser p, DeserializationContext ctxt)
	}
	class "JsonDeserializer<CountryCollector>" as JsonDeserializer_CountryCollector_ {
	}
	JsonDeserializer_CountryCollector_ <|-- CountryCollectorDeserializer

	class CountryCollectorModule [[java:CountryCollectorModule]] {
	}
	class Module [[java:com.sun.tools.sjavac.Module]] {
	}
	Module <|-- CountryCollectorModule

	class CountryCollectorSerializer [[java:CountryCollectorSerializer]] {
		+void serialize(CountryCollector collector, JsonGenerator gen, SerializerProvider serializers)
	}
	class "JsonSerializer<CountryCollector>" as JsonSerializer_CountryCollector_ {
	}
	JsonSerializer_CountryCollector_ <|-- CountryCollectorSerializer

	class CountryDeserializer [[java:CountryDeserializer]] {
		+Country deserialize(JsonParser p, DeserializationContext ctxt)
	}
	class "JsonDeserializer<Country>" as JsonDeserializer_Country_ {
	}
	JsonDeserializer_Country_ <|-- CountryDeserializer

	class PersistenceHandler [[java:globingular.persistence.PersistenceHandler]] {
		-{static}Path FILE_COLLECTOR
		-{static}Path DATA_FOLDER
		-{static}String FILE_MAP_WORLD
		-{static}String SAMPLE_COLLECTOR
		-ObjectMapper objectMapper
		-ObjectMapper getObjectMapper()
		+CountryCollector loadMapCountryCollector()
		-World loadMapWorld()
		+void saveState(CountryCollector countryCollector)
	}

	class WorldDeserializer [[java:WorldDeserializer]] {
		+World deserialize(JsonParser p, DeserializationContext ctxt)
	}
	class "JsonDeserializer<World>" as JsonDeserializer_World_ {
	}
	JsonDeserializer_World_ <|-- WorldDeserializer

	class WorldSerializer [[java:WorldSerializer]] {
		+void serialize(World value, JsonGenerator gen, SerializerProvider serializers)
	}
	class "JsonSerializer<World>" as JsonSerializer_World_ {
	}
	JsonSerializer_World_ <|-- WorldSerializer
}

package globingular.ui {
	class App [[java:App]] {
		+void start(Stage primaryStage)
		+{static}void main(String[] args)
	}
	class Application [[java:com.sun.glass.ui.Application]] {
	}
	Application <|-- App

	class AppController [[java:globingular.ui.AppController]] {
		-PersistenceHandler persistence
		-CountryCollector countryCollector
		-World world
		-Document document
		-Country inputCountry
		+{static}PseudoClass INVALID
		+{static}PseudoClass BLANK
		-Parent root
		-ListView<Country> countriesList
		-TextField countryInput
		-Button countryAdd
		-Button countryDel
		-ImageView imgView
		+AppController()
		+void initialize(URL location, ResourceBundle resources)
		+CountryCollector getCountryCollector()
		~void onCountryAdd()
		-void onInputChange()
		~void onCountryDel()
		-void setColor(Country country, Colors color)
		-void setColorAll(Collection<Country> countries, Colors color)
		-void updateMap()
	}
	interface Initializable [[java:javafx.fxml.Initializable]] {
	}
	Initializable <|.. AppController

	class BufferedImageTranscoder [[java:globingular.ui.BufferedImageTranscoder]] {
		-BufferedImage img
		+BufferedImage createImage(int w, int h)
		+void writeImage(BufferedImage image, TranscoderOutput ignoredTO)
		+BufferedImage getBufferedImage()
		+void setImg(BufferedImage img)
	}
	class ImageTranscoder [[java:javax.imageio.ImageTranscoder]] {
	}
	ImageTranscoder <|-- BufferedImageTranscoder

	enum Colors [[java:globingular.ui.Colors]] {
		COUNTRY_NOT_VISITED
		COUNTRY_VISITED
		hex
		~Colors(String hex)
		+String getHex()
	}
}


' globingular.core
Country --> "provinces: *" Province
CountryCollector --> "world: 1" World
World --> "countriesByCode: *" Country
World --> "countriesByName: *" Country

' globingular.persistence

' globingular.ui
AppController --> "persistence: 1" PersistenceHandler
AppController --> "countryCollector: 1" CountryCollector
AppController --> "world: 1" World
AppController --> "inputCountry: 1" Country
AppController --> "countriesList: *" Country

@enduml
